import { FullConfig } from '@playwright/test';\n\n/**\n * Global teardown for Playwright tests\n * Performs cleanup after all tests complete\n */\n\nasync function globalTeardown(config: FullConfig) {\n  console.log('üßπ Running global test cleanup...');\n  \n  const fs = await import('fs/promises');\n  const path = await import('path');\n  \n  try {\n    // Generate test summary report\n    const testResultsDir = path.join(process.cwd(), 'test-results');\n    const summaryPath = path.join(testResultsDir, 'test-summary.json');\n    \n    const summary = {\n      timestamp: new Date().toISOString(),\n      testRun: {\n        configFile: config.configFile,\n        projects: config.projects.map(p => ({\n          name: p.name,\n          testDir: p.testDir,\n          outputDir: p.outputDir\n        })),\n        globalSetup: config.globalSetup,\n        globalTeardown: config.globalTeardown\n      },\n      environment: {\n        nodeVersion: process.version,\n        platform: process.platform,\n        architecture: process.arch,\n        ci: !!process.env.CI\n      }\n    };\n    \n    await fs.writeFile(summaryPath, JSON.stringify(summary, null, 2));\n    console.log('‚úÖ Test summary report generated');\n    \n    // Clean up temporary test data (but preserve results)\n    const tempDataPattern = /^temp-.*$/;\n    try {\n      const files = await fs.readdir(testResultsDir);\n      const tempFiles = files.filter(file => tempDataPattern.test(file));\n      \n      for (const file of tempFiles) {\n        const filePath = path.join(testResultsDir, file);\n        await fs.unlink(filePath);\n      }\n      \n      if (tempFiles.length > 0) {\n        console.log(`‚úÖ Cleaned up ${tempFiles.length} temporary files`);\n      }\n    } catch (error) {\n      console.log('‚ÑπÔ∏è  No temporary files to clean up');\n    }\n    \n    // Log final statistics if available\n    try {\n      const resultsJsonPath = path.join(testResultsDir, 'browser-test-results.json');\n      const resultsData = await fs.readFile(resultsJsonPath, 'utf-8');\n      const results = JSON.parse(resultsData);\n      \n      if (results && results.stats) {\n        console.log('üìä Test Results Summary:');\n        console.log(`   Total tests: ${results.stats.total || 0}`);\n        console.log(`   Passed: ${results.stats.passed || 0}`);\n        console.log(`   Failed: ${results.stats.failed || 0}`);\n        console.log(`   Skipped: ${results.stats.skipped || 0}`);\n        console.log(`   Duration: ${results.stats.duration ? Math.round(results.stats.duration / 1000) : 0}s`);\n      }\n    } catch (error) {\n      console.log('‚ÑπÔ∏è  Test results summary not available');\n    }\n    \n  } catch (error) {\n    console.error('‚ö†Ô∏è  Error during global teardown:', error);\n    // Don't fail the entire test run due to teardown issues\n  }\n  \n  console.log('‚úÖ Global teardown completed');\n}\n\nexport default globalTeardown;"}