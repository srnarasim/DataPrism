import { chromium, FullConfig } from '@playwright/test';\n\n/**\n * Global setup for Playwright tests\n * Performs one-time setup before all tests run\n */\n\nasync function globalSetup(config: FullConfig) {\n  console.log('üîß Setting up global test environment...');\n  \n  // Launch a browser to check WebAssembly support\n  const browser = await chromium.launch();\n  const context = await browser.newContext();\n  const page = await context.newPage();\n  \n  try {\n    // Check WebAssembly support\n    const wasmSupported = await page.evaluate(() => {\n      return typeof WebAssembly !== 'undefined' && \n             typeof WebAssembly.instantiate === 'function' &&\n             typeof WebAssembly.Module === 'function';\n    });\n    \n    if (!wasmSupported) {\n      console.error('‚ùå WebAssembly not supported in test browser');\n      throw new Error('WebAssembly support required for DataPrism Core tests');\n    }\n    \n    console.log('‚úÖ WebAssembly support confirmed');\n    \n    // Check for SharedArrayBuffer support (required for threading)\n    const sharedArrayBufferSupported = await page.evaluate(() => {\n      return typeof SharedArrayBuffer !== 'undefined';\n    });\n    \n    if (sharedArrayBufferSupported) {\n      console.log('‚úÖ SharedArrayBuffer support confirmed');\n    } else {\n      console.log('‚ö†Ô∏è  SharedArrayBuffer not supported - threading features will be limited');\n    }\n    \n    // Test basic WASM instantiation\n    const wasmInstantiationWorks = await page.evaluate(async () => {\n      try {\n        // Simple WASM module that exports a function returning 42\n        const wasmCode = new Uint8Array([\n          0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,\n          0x01, 0x07, 0x01, 0x60, 0x02, 0x7f, 0x7f, 0x01,\n          0x7f, 0x03, 0x02, 0x01, 0x00, 0x07, 0x07, 0x01,\n          0x03, 0x61, 0x64, 0x64, 0x00, 0x00, 0x0a, 0x09,\n          0x01, 0x07, 0x00, 0x20, 0x00, 0x20, 0x01, 0x6a,\n          0x0b\n        ]);\n        \n        const module = await WebAssembly.instantiate(wasmCode);\n        const result = (module.instance.exports.add as Function)(20, 22);\n        return result === 42;\n      } catch (error) {\n        console.error('WASM instantiation test failed:', error);\n        return false;\n      }\n    });\n    \n    if (!wasmInstantiationWorks) {\n      console.error('‚ùå WebAssembly instantiation test failed');\n      throw new Error('WebAssembly instantiation not working properly');\n    }\n    \n    console.log('‚úÖ WebAssembly instantiation test passed');\n    \n    // Test fetch API (required for loading WASM files)\n    const fetchSupported = await page.evaluate(() => {\n      return typeof fetch !== 'undefined';\n    });\n    \n    if (!fetchSupported) {\n      console.error('‚ùå Fetch API not supported');\n      throw new Error('Fetch API required for loading WASM modules');\n    }\n    \n    console.log('‚úÖ Fetch API support confirmed');\n    \n  } finally {\n    await page.close();\n    await context.close();\n    await browser.close();\n  }\n  \n  // Set up test data directory\n  const fs = await import('fs/promises');\n  const path = await import('path');\n  \n  const testDataDir = path.join(process.cwd(), 'test-results');\n  await fs.mkdir(testDataDir, { recursive: true });\n  \n  console.log('‚úÖ Test data directory created');\n  \n  // Create test artifacts directory\n  const artifactsDir = path.join(testDataDir, 'artifacts');\n  await fs.mkdir(artifactsDir, { recursive: true });\n  \n  console.log('‚úÖ Test artifacts directory created');\n  \n  console.log('üéâ Global setup completed successfully');\n}\n\nexport default globalSetup;"}