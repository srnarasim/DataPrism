name: CDN Deployment

on:
  push:
    branches: [main]
    paths:
      - 'packages/**'
      - 'tools/build/**'
      - 'cdn/**'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      cdn_target:
        description: 'CDN deployment target'
        required: true
        default: 'github-pages'
        type: choice
        options:
          - github-pages
          - cloudflare-pages
          - netlify
          - vercel
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  RUST_VERSION: 'stable'

jobs:
  # Detect changes to determine if CDN deployment is needed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      cdn-changed: ${{ steps.changes.outputs.cdn }}
      packages-changed: ${{ steps.changes.outputs.packages }}
      force-deploy: ${{ inputs.force_deploy || false }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            cdn:
              - 'packages/**'
              - 'tools/build/**'
              - 'cdn/**'
              - '.github/workflows/cdn-deploy.yml'
            packages:
              - 'packages/**'

  # Build packages and prepare CDN assets
  build-cdn:
    needs: detect-changes
    if: needs.detect-changes.outputs.cdn-changed == 'true' || needs.detect-changes.outputs.force-deploy == 'true'
    runs-on: ubuntu-latest
    outputs:
      deployment-id: ${{ steps.deployment-id.outputs.id }}
      cdn-size: ${{ steps.build-cdn.outputs.size }}
      asset-count: ${{ steps.build-cdn.outputs.count }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Install dependencies
        run: npm ci

      - name: Generate deployment ID
        id: deployment-id
        run: |
          DEPLOYMENT_ID="deploy_$(date +%s)_$(git rev-parse --short HEAD)"
          echo "id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV

      - name: Build packages
        run: |
          echo "Building DataPrism packages..."
          npm run build:packages
        env:
          NODE_ENV: production

      - name: Build CDN assets
        id: build-cdn
        run: |
          echo "Building CDN assets for target: ${{ inputs.cdn_target || 'github-pages' }}"
          
          # Set CDN-specific environment variables
          export CDN_TARGET=${{ inputs.cdn_target || 'github-pages' }}
          export CDN_COMPRESSION=both
          export CDN_VERSIONING=hash
          export CDN_WASM_OPTIMIZATION=true
          export CDN_BASE_URL="${{ (inputs.cdn_target == 'github-pages' || (github.event_name != 'workflow_dispatch')) && format('https://{0}.github.io/{1}', github.repository_owner, github.event.repository.name) || '' }}"
          
          # Build CDN bundles
          npm run build:cdn
          
          # Calculate metrics
          CDN_SIZE=$(du -sb cdn/dist | cut -f1)
          ASSET_COUNT=$(find cdn/dist -type f | wc -l)
          
          echo "size=$CDN_SIZE" >> $GITHUB_OUTPUT
          echo "count=$ASSET_COUNT" >> $GITHUB_OUTPUT
          
          echo "CDN build completed:"
          echo "  Size: $(numfmt --to=iec $CDN_SIZE)"
          echo "  Files: $ASSET_COUNT"
        env:
          NODE_ENV: production

      - name: Validate CDN bundle sizes
        run: |
          echo "Validating CDN bundle sizes..."
          npm run size-check:cdn
          
          # Additional validation for critical files
          if [ -f "cdn/dist/dataprism.min.js" ]; then
            CORE_SIZE=$(stat -c%s "cdn/dist/dataprism.min.js")
            if [ $CORE_SIZE -gt 2097152 ]; then # 2MB
              echo "❌ Core bundle exceeds 2MB limit: $(numfmt --to=iec $CORE_SIZE)"
              exit 1
            fi
            echo "✅ Core bundle size OK: $(numfmt --to=iec $CORE_SIZE)"
          fi

      - name: Generate deployment manifest
        run: |
          cat > cdn/dist/deployment-info.json << EOF
          {
            "deploymentId": "${{ steps.deployment-id.outputs.id }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "${{ inputs.environment || 'production' }}",
            "target": "${{ inputs.cdn_target || 'github-pages' }}",
            "gitCommit": "${{ github.sha }}",
            "gitBranch": "${{ github.ref_name }}",
            "repository": "${{ github.repository }}",
            "workflow": "${{ github.run_id }}",
            "actor": "${{ github.actor }}",
            "totalSize": ${{ steps.build-cdn.outputs.size }},
            "assetCount": ${{ steps.build-cdn.outputs.count }}
          }
          EOF

      - name: Upload CDN artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cdn-assets
          path: cdn/dist/
          retention-days: 30

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            npm-debug.log*
            *.log
          if-no-files-found: ignore

  # Deploy to GitHub Pages
  deploy-github-pages:
    needs: [detect-changes, build-cdn]
    if: needs.build-cdn.result == 'success' && (inputs.cdn_target == 'github-pages' || (github.event_name != 'workflow_dispatch' && 'github-pages' == 'github-pages'))
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.page_url }}
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download CDN artifacts
        uses: actions/download-artifact@v4
        with:
          name: cdn-assets
          path: cdn/dist/

      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./cdn/dist/
          publish_branch: gh-pages
          destination_dir: cdn
          keep_files: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Deploy CDN assets to /cdn/ - ${{ github.sha }}'

      - name: Set deploy output
        id: deploy
        run: |
          echo "page_url=https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/cdn" >> $GITHUB_OUTPUT

      - name: Update deployment status
        run: |
          echo "✅ CDN deployed successfully to GitHub Pages"
          echo "🌐 URL: ${{ steps.deploy.outputs.page_url }}"
          echo "📦 Deployment ID: ${{ needs.build-cdn.outputs.deployment-id }}"
          echo "📊 Size: $(numfmt --to=iec ${{ needs.build-cdn.outputs.cdn-size }})"
          echo "📁 Files: ${{ needs.build-cdn.outputs.asset-count }}"

  # Deploy to other CDN providers (future implementation)
  deploy-other-cdn:
    needs: [detect-changes, build-cdn]
    if: needs.build-cdn.result == 'success' && inputs.cdn_target != 'github-pages' && github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download CDN artifacts
        uses: actions/download-artifact@v4
        with:
          name: cdn-assets
          path: cdn/dist/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install deployment tools
        run: npm ci

      - name: Deploy to CDN
        run: |
          echo "🚧 Deploying to ${{ inputs.cdn_target }}"
          echo "This deployment target is not yet implemented."
          echo "Supported targets: github-pages"
          exit 1

  # Validate deployment
  validate-deployment:
    needs: [build-cdn, deploy-github-pages]
    if: always() && (needs.deploy-github-pages.result == 'success' || needs.deploy-other-cdn.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployment propagation
        run: |
          echo "⏳ Waiting for CDN deployment to propagate..."
          sleep 60

      - name: Validate deployment
        run: |
          DEPLOYMENT_URL="${{ (inputs.cdn_target == 'github-pages' || (github.event_name != 'workflow_dispatch')) && format('https://{0}.github.io/{1}/cdn', github.repository_owner, github.event.repository.name) || 'https://example.com' }}"
          
          echo "🔍 Validating deployment at: $DEPLOYMENT_URL"
          
          # Basic connectivity test
          if curl -f -s "$DEPLOYMENT_URL/manifest.json" > /dev/null; then
            echo "✅ Manifest is accessible"
          else
            echo "❌ Manifest is not accessible"
            exit 1
          fi
          
          # Test core assets
          if curl -f -s "$DEPLOYMENT_URL/dataprism.min.js" > /dev/null; then
            echo "✅ Core bundle is accessible"
          else
            echo "❌ Core bundle is not accessible"
            exit 1
          fi
          
          # Test WASM assets
          if curl -f -s "$DEPLOYMENT_URL/assets/" > /dev/null 2>&1; then
            echo "✅ WASM assets directory is accessible"
          else
            echo "⚠️  WASM assets directory may not be accessible"
          fi
          
          echo "🎉 Basic validation completed successfully"

      - name: Performance validation
        run: |
          DEPLOYMENT_URL="${{ (inputs.cdn_target == 'github-pages' || (github.event_name != 'workflow_dispatch')) && format('https://{0}.github.io/{1}/cdn', github.repository_owner, github.event.repository.name) || 'https://example.com' }}"
          
          echo "📊 Running performance tests..."
          
          # Measure load time
          START_TIME=$(date +%s%N)
          curl -s "$DEPLOYMENT_URL/dataprism.min.js" > /dev/null
          END_TIME=$(date +%s%N)
          LOAD_TIME=$(( (END_TIME - START_TIME) / 1000000 ))
          
          echo "⚡ Core bundle load time: ${LOAD_TIME}ms"
          
          if [ $LOAD_TIME -gt 5000 ]; then
            echo "⚠️  Load time exceeds 5 second target"
          else
            echo "✅ Load time within target"
          fi

  # Notify on completion
  notify-completion:
    needs: [build-cdn, deploy-github-pages, deploy-other-cdn, validate-deployment]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "## 📋 CDN Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 Target | ${{ inputs.cdn_target || 'github-pages' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🌍 Environment | ${{ inputs.environment || 'production' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏷️ Deployment ID | ${{ needs.build-cdn.outputs.deployment-id || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Bundle Size | $(numfmt --to=iec ${{ needs.build-cdn.outputs.cdn-size || 0 }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| 📁 Asset Count | ${{ needs.build-cdn.outputs.asset-count || 0 }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Build Status | ${{ needs.build-cdn.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Deploy Status | ${{ needs.deploy-github-pages.result || needs.deploy-other-cdn.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Validation | ${{ needs.validate-deployment.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build-cdn.result }}" == "success" && ("${{ needs.deploy-github-pages.result }}" == "success" || "${{ needs.deploy-other-cdn.result }}" == "success") ]]; then
            echo "🎉 **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ inputs.cdn_target || 'github-pages' }}" == "github-pages" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🌐 **CDN URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Deployment failed or was skipped**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request' && needs.build-cdn.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ inputs.cdn_target || 'github-pages' }}' === 'github-pages' 
              ? `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}`
              : 'Deployment URL will be available after merge';
            
            const comment = `## 📦 CDN Build Preview
            
            Your changes have been built and are ready for CDN deployment.
            
            **Build Summary:**
            - 🎯 Target: \`${{ inputs.cdn_target || 'github-pages' }}\`
            - 📦 Bundle Size: \`$(numfmt --to=iec ${{ needs.build-cdn.outputs.cdn-size || 0 }})\`
            - 📁 Assets: \`${{ needs.build-cdn.outputs.asset-count || 0 }}\` files
            - 🏷️ Deployment ID: \`${{ needs.build-cdn.outputs.deployment-id }}\`
            
            **Deployment Status:** ${{ needs.deploy-github-pages.result == 'success' && '✅ Ready' || '⏳ Will deploy after merge' }}
            
            ${deploymentUrl !== 'Deployment URL will be available after merge' ? `**Preview URL:** ${deploymentUrl}` : ''}
            
            <details>
            <summary>📊 Bundle Analysis</summary>
            
            The CDN bundle has been optimized and validated:
            - ✅ Size limits enforced
            - ✅ WASM streaming compilation enabled  
            - ✅ Asset integrity hashes generated
            - ✅ Cross-origin headers configured
            
            </details>
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });